import json
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication

import re

import boto3
from botocore.exceptions import ClientError

DEV_OPS_DL = 'indukuriv@gmail.com'
#AUDIT_EMAIL_ADDRESS = 'auditing.test@mail.aws..io'
#RETURN_PATH_ADDRESS = 'auditing.feedback@mail.aws..io'
#SES_SOURCE_ARN = 'arn:aws:ses:us-east-1:900751145041:identity/mail.aws..io'
#SES_RETURNPATH_ARN = 'arn:aws:ses:us-east-1:900751145041:identity/mail.aws..io'
#DEBUG_EMAIL_DESTINATION = 'AWS-DEVOPS-TEST@wey.com'
RULE_NAME_REGEX = '-(.*?)-'

ses_client = boto3.client('ses', region_name="us-east-1")
config_client = boto3.client('config')

# Lambda handler function


def lambda_handler(event, context):
    #pylint: disable=unused-argument
    generate_reports()


def is_prod_environment():
    """Returns True if running in dev environment otherwise False"""
    return False
    # return 'HOME' in os.environ and os.environ.get('ENVIRONMENT') == 'PROD'

# This is the main function that retrieves the data and emails the reports


def generate_reports():
    aggregators = get_aggregator_data('BusinessUnit')
#    print(aggregators)
#    print('Got list of BU aggregators' + str(aggregators))
    jsondata = []

    for aggregator in aggregators:
        agg_rules_obj = {}
        agg_rules_obj['AggregatorName'] = aggregator['AggregatorName']
        agg_rules_obj['AggregatorRules'] = []
        resources_by_rule_name = {}
        

        for rule in aggregator['AggregatorRules']:
            rule_name = rule['ConfigRuleName']
            account_id = rule['AccountId']
            aws_region = rule['AwsRegion']
#            print(re.findall(RULE_NAME_REGEX, rule_name))
            if re.findall(RULE_NAME_REGEX, rule_name)!= []:
                base_rule_name = re.findall(RULE_NAME_REGEX, rule_name)[0]
#            print(base_rule_name)
            rule_resources = resources_by_rule_name.get(base_rule_name, [])

            paginator = config_client.get_paginator(
                'get_aggregate_compliance_details_by_config_rule')
            for page in paginator.paginate(ConfigurationAggregatorName=aggregator['AggregatorName'],
                                           ConfigRuleName=rule_name,
                                           ComplianceType='NON_COMPLIANT',
                                           AccountId=account_id,
                                           AwsRegion=aws_region):
                for eval_result in page['AggregateEvaluationResults']:
                    result = eval_result['EvaluationResultIdentifier']['EvaluationResultQualifier']
                    result['AccountId'] = account_id
                    result['AwsRegion'] = aws_region
                    rule_resources.append(result)

            resources_by_rule_name[base_rule_name] = rule_resources

        for rule in resources_by_rule_name:
            agg_rules_obj['AggregatorRules'].append(
                {'rule': rule, 'resources': resources_by_rule_name[rule]})

#        print(f"Sending report for {get_aggregator_business_unit(aggregator)}")
#        send_email(aggregator, json.dumps(agg_rules_obj))
#        print(json.dumps(agg_rules_obj))

        print(agg_rules_obj)
        BusinessUnit = get_aggregator_business_unit(aggregator)
        print("Print businessunit : " + BusinessUnit)
        jsondata = json.dumps(agg_rules_obj)

#        print("Json Data : " + jsondata)
        # Send email using a template
        response = ses_client.send_templated_email(
            Source=DEV_OPS_DL,
            Destination={
                'ToAddresses': [
                    'indukuriv@gmail.com',
                ],
            },
            Template='AWSConfigComplianceReport',
            TemplateData=jsondata
        )

        print(f"Sent report for {get_aggregator_business_unit(aggregator)}")
        break


def get_aggregator_data(aggregator_level):
    """
    Parameters:
    aggregatorLevel (string): filter by either Pillar or BusinessUnit.

    Returns a list of aggregators and their rules that were evaluated as non compliant
    """
    aggregator_rule_list = []
    aggregators = get_aggregators()
    print('Got list of ALL aggregators')

    for aggregator in aggregators:
        config_rules = []
        aggregator_name = aggregator['AggregatorName']
        tags = aggregator['Tags']

        if tags['AggregatorLevel'] != aggregator_level:
            continue

        aggregator_info = {}
        aggregator_info['AggregatorName'] = aggregator_name
        aggregator_info['Tags'] = tags
        paginator = config_client.get_paginator(
            'describe_aggregate_compliance_by_config_rules')
        for page in paginator.paginate(ConfigurationAggregatorName=aggregator_name, Filters={'ComplianceType': 'NON_COMPLIANT'}):
            config_rules.extend(page['AggregateComplianceByConfigRules'])

        aggregator_info['AggregatorRules'] = config_rules
        aggregator_rule_list.append(aggregator_info)
    return aggregator_rule_list

# This function returns a list of aggregators and their tags.


def get_aggregators():
    """Returns a list of AWS Config rule aggregators"""
    aggregators = []
    for page in config_client.get_paginator('describe_configuration_aggregators').paginate():
        for aggregator in page['ConfigurationAggregators']:
            name = aggregator['ConfigurationAggregatorName']
            aggregator_arn = aggregator['ConfigurationAggregatorArn']
            tags = get_tags_for_resource(aggregator_arn)
            aggregators.append({'AggregatorName': name, 'Tags': tags})
    return aggregators

# Returns the tags for a resource


def get_tags_for_resource(arn):
    """Parameters:
    arn (string): The arn of the resource
    """
    resp = config_client.list_tags_for_resource(ResourceArn=arn)
    tags = {tags['Key']: tags['Value'] for tags in resp['Tags']}
    return tags

# Gets the contact address associated with an aggregator


def get_aggregator_email_contact(aggregator):
    if is_prod_environment():
        return aggregator['Tags']['DevOpsContact']
    return DEBUG_EMAIL_DESTINATION


def get_aggregator_business_unit(aggregator):
    print(aggregator['Tags']['BusinessUnit'])
    return aggregator['Tags']['BusinessUnit']

